---
title: "inbasketosis"
format: html
---

```{r preprocess, message=FALSE, warning=FALSE}

# Load libraries
library(readxl)
library(readr)
library(dplyr)
library(tidyr)
library(stringr)
library(janitor)

# Load raw data
messages <- read_excel("Epic Signal PEP Data.xlsx", sheet = "Messages")
time <- read_excel("Epic Signal PEP Data.xlsx", sheet = "Time")
raw <- bind_rows(messages, time)

# Initial exploration
str(raw)
head(raw)
sort(unique(raw$Metric))

# Data cleaning
clean <- raw |>
  mutate(
    
    id = as.character(DE_ID),
    
    type = factor(
      case_when(
        Grouper == "PHYSICIAN + PSYCHIATRIST" ~ "MD",
        Grouper == "NURSE PRACTITIONER" ~ "NP",
        Grouper == "RESIDENT + FELLOW" ~ "RF",
        TRUE ~ Grouper
      ),
      levels = c("MD", "NP", "RF")
    ),

    group =
      factor(
        case_when(
          type %in% c("MD", "NP") ~ "Staff",
          TRUE ~ "Trainee"
          ),
          levels = c("Staff", "Trainee")
        ),
    
    # fix typo
    metric = str_replace(Metric, "Recieved", "Received")

  ) |>
  
  # remove duplicates
  distinct(id, type, metric, .keep_all = TRUE) |>

  # select columns
  select(id, type, group, metric, starts_with(c("24-", "25-")))


# Full
full <- clean |>
  pivot_longer(starts_with(c("24-", "25-")), names_to = "month", values_to = "value") |>
  pivot_wider(names_from = c("metric", "month"), values_from = "value") |> clean_names()


# Monthly
monthly <- clean |>
  summarise(
    across(
      starts_with(c("24-", "25-")),
      ~ as.numeric(case_when(str_starts(metric[1], "Count Of") ~ sum(.x, na.rm = TRUE),
                             TRUE ~ mean(.x, na.rm = TRUE)))),
    .by = metric
  ) |>
  pivot_longer(starts_with(c("24-", "25-")), names_to = "month", values_to = "value") |>
  # convert month to date
  mutate(
    month = as.Date(paste0(str_replace(month, "-", "-01-"), "01"), format = "%y-%m"
    )
  )

# Final
final <- clean |>
  rowwise() |>
  mutate(
    
    n_months = sum(!is.na(c_across(starts_with(c("24-", "25-"))))),
    
    tot = ifelse(str_starts(metric, "Count Of"),
                 sum(c_across(starts_with(c("24-", "25-"))), na.rm = TRUE),
                 mean(c_across(starts_with(c("24-", "25-"))), na.rm = TRUE)),
    
    max = max(c_across(starts_with(c("24-", "25-"))), na.rm = TRUE)
  ) |> ungroup() |>
  select(id, type, n_months, group, metric, tot, max) |>
  
  pivot_wider(
    names_from = metric,
    values_from = c(tot, max),
    names_sep = "_"
  ) |> clean_names() |>
  
  transmute(
    
    # object identifiers
    id, type, group, n_months,
    
    # general denominators
    n_appt = tot_count_of_appointments,
    n_sch_day = tot_count_of_scheduled_days,
    n_sch_hrs = tot_scheduled_hours_per_day * n_sch_day,
    sys_min = tot_count_of_minutes_in_the_system,
    sys_hrs = sys_min / 60,
    
    # message counts
    n_mar = tot_count_of_patient_medical_advice_requests_messages_received,
    n_pcm = tot_count_of_patient_call_messages_received,
    n_res = tot_count_of_result_messages_received,
    n_rxa = tot_count_of_rx_auth_messages_received,
    n_msg = n_mar + n_pcm + n_res + n_rxa,
        
    # in-basket load
    ib_min = tot_count_of_in_basket_minutes,
    ib_hrs = ib_min / 60,
    ib_min_per_msg = ifelse(n_msg > 0, ib_min / n_msg, NA),
    ib_sys_ratio = ib_min / sys_min,
    ib_sch_ratio = ib_hrs / n_sch_hrs,
    
    # average days to complete (dtc)
    dtc_mar = tot_average_days_until_patient_medical_advice_request_message_marked_done,
    dtc_pcm = tot_average_days_until_patient_call_messages_marked_done,
    dtc_res = tot_average_days_until_result_message_marked_done,
    dtc_rxa = tot_average_days_until_rx_auth_message_marked_done,
    dtc_msg = (dtc_mar + dtc_pcm + dtc_res + dtc_rxa) / 4,

    # afterhours
    min_ost = tot_count_of_minutes_active_outside_scheduled_time_30_min_buffer,
    min_oud = tot_count_of_minutes_active_on_unscheduled_days,
    min_sat = tot_count_of_saturday_minutes,
    min_sun = tot_count_of_sunday_minutes,
    ah_min = min_ost + min_oud + min_sat + min_sun,
    ah_hrs = ah_min / 60,
    ah_sys_ratio = ah_min / sys_min,
    
    # minutes per appointment (mpa)
    ib_mpa = tot_minutes_in_in_basket_per_appointment,
    cr_mpa = tot_minutes_in_clinical_review_per_appointment,
    nl_mpa = tot_minutes_in_notes_letters_per_appointment,
    or_mpa = tot_minutes_in_orders_per_appointment,
    mpa = ib_mpa + cr_mpa + nl_mpa + or_mpa,
    
    # mpa proportions
    ib_mpa_pct = ifelse(ib_mpa > 0, ib_mpa / mpa, NA),
    cr_mpa_pct = ifelse(cr_mpa > 0, cr_mpa / mpa, NA),
    nl_mpa_pct = ifelse(nl_mpa > 0, nl_mpa / mpa, NA),
    or_mpa_pct = ifelse(or_mpa > 0, or_mpa / mpa, NA),
    
    # per month (pm)
    appt_pm = n_appt / n_months,
    sch_day_pm = n_sch_day / n_months,
    sch_hrs_pm = n_sch_hrs / n_months,
    sys_hrs_pm = sys_hrs / n_months,
    ah_hrs_pm = ah_hrs / n_months,
    ib_hrs_pm = ib_hrs / n_months,
    msg_pm = n_msg / n_months,
    mar_pm = n_mar / n_months,
    pcm_pm = n_pcm / n_months,
    res_pm = n_res / n_months,
    rxa_pm = n_rxa / n_months,
    
    # monthly max values
    appt_max = max_count_of_appointments,
    sch_day_max = max_count_of_scheduled_days,
    sch_hrs_max = max_scheduled_hours_per_day * sch_day_max,
    sys_hrs_max = max_count_of_minutes_in_the_system / 60,
    ah_hrs_max = (max_count_of_minutes_active_outside_scheduled_time_30_min_buffer +
                    max_count_of_minutes_active_on_unscheduled_days +
                    max_count_of_saturday_minutes +
                    max_count_of_sunday_minutes) / 60,
    ib_hrs_max = max_count_of_in_basket_minutes / 60,
    mar_max = max_count_of_patient_medical_advice_requests_messages_received,
    pcm_max = max_count_of_patient_call_messages_received,
    res_max = max_count_of_result_messages_received,
    rxa_max = max_count_of_rx_auth_messages_received,
    msg_max = mar_max + pcm_max + res_max + rxa_max
    
  )
  
# Save all datasets
if (!dir.exists("data")) {
  dir.create("data")
}
raw |> saveRDS("data/raw.rds")
clean |> saveRDS("data/clean.rds")
full |> saveRDS("data/full.rds")
monthly |> saveRDS("data/monthly.rds")
final |> saveRDS("data/final.rds")

```

```{r eda, message=FALSE, warning=FALSE}

# Load libraries
library(ggplot2)
library(knitr)
library(kableExtra)
library(scales)
library(reshape2)
library(corrplot)
library(RColorBrewer)
library(gridExtra)
library(grid)
library(patchwork)
library(ggpubr)
library(viridis)
library(ggthemes)
library(ggcorrplot)
library(broom)

# Load datasets
final <- readRDS("data/final.rds")
monthly <- readRDS("data/monthly.rds")

# Plot metric values as lines over months
metrics_to_plot <- c(
  "Count Of Patient Medical Advice Requests Messages Received",
  "Count Of Patient Call Messages Received",
  "Count Of Result Messages Received",
  "Count Of Rx Auth Messages Received",
  "Count Of In-Basket Minutes",
  "Count Of Minutes Active Outside Scheduled Time 30 Min Buffer"
)
metric_plots <- lapply(metrics_to_plot, function(metric_name) {
  metric_data <- monthly %>%
    filter(metric == metric_name)
  
  ggplot(metric_data, aes(x = month, y = value)) +
    geom_line() +
    geom_point() +
    labs(
      title = metric_name,
      x = "Month",
      y = "Value"
    ) +
    theme_minimal()
})


```

``` {r table_1}

# Table 1: 

```

``` {r, table_2}
### Table 2: Message Volume and Completion Metrics by Type

| Metric                           | Medical Advice Request | Patient Call | Results | Rx Auth |  All  |
|----------------------------------|------------------------|--------------|---------|---------|-------|
| Total - n (%)                    |                        |              |         |         |       |
| Per Month - mean (sd)            |                        |              |         |         |       |
| Days To Complete - mean (sd)     |                        |              |         |         |       |
| Correlation to In-Basket Hours*  |                        |              |         |         |       |
| Correlation to After-Hours*      |                        |              |         |         |       |
* Pearson Correlation Coefficient.
```

``` {r, table_3}
# Table 3:

```

``` {r, table_4}
# Table 4: 

```


``` {r, figure_1}
# Figure 1: Barplot of ranked In-Basket Hours Per Month (colored by Provider Type)
fig1 <- ggplot(final, aes(x = reorder(id, -ib_hrs_pm), y = ib_hrs_pm, fill = type)) +
  geom_bar(stat = "identity") +
  labs(
    title = "In-Basket Hours Per Month by Provider",
    x = "Provider ID (ranked)",
    y = "In-Basket Hours Per Month"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_blank())

```

``` {r, figure_2}
# Figure 2: Cumulative Ranked Share of In-Basket Hours by Providers (ranked by In-Basket Hours)
fig2 <- ggplot(final, aes(x = reorder(id, -ib_hrs_pm), y = cumsum(ib_hrs_pm) / sum(ib_hrs_pm), color = type)) +
  geom_line() +
  labs(
    title = "Cumulative Ranked Share of In-Basket Hours by Providers",
    x = "Provider ID (ranked)",
    y = "Cumulative Share of In-Basket Hours"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_blank())

```

``` {r, figure_3}
# Figure 3: Cumulative appointment equivalents by Providers (ranked by In-Basket Hours)


```

``` {r, figure_4}
# Figure 4: Scatterplot of Total Messages Received per Month vs In-Basket Hours per Month (colored by Provider Type)


```

``` {r, figure_5}
# Figure 5: In-Basket Minutes Per Appointment Vs. After-Hours Ratio


```

``` {r, figure_6}
### Figure 6: Heatmap of key correlations


```

``` {r save_outputs}

# Save tables and figures
if (!dir.exists("outputs")) {
  dir.create("outputs")
}



```