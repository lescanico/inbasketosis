---
title: "inbasketosis"
format: html
code-fold: true
---

```{r preprocess, message=FALSE, warning=FALSE}

# Load necessary libraries for data manipulation
library(readxl)
library(readr)
library(dplyr)
library(tidyr)
library(stringr)
library(janitor)

# Load the raw dataset
messages <- read_excel("Epic Signal PEP Data.xlsx", sheet = "Messages")
time <- read_excel("Epic Signal PEP Data.xlsx", sheet = "Time")
raw <- bind_rows(messages, time)

# Initial exploration
str(raw)
head(raw)
sort(unique(raw$Metric))

# Filter relevant metrics
filtered <- raw |>
  filter(
    Metric %in% c(
      # general load
      "Count Of Scheduled Days",
      "Scheduled Hours per Day",
      "Count Of Appointments",
      "Count Of Minutes In The System",
      
      # inbasket load
      "Count Of In Basket Minutes",
      "Count Of Patient Call Messages Recieved",
      "Count Of Patient Medical Advice Requests Messages Recieved",
      "Count Of Result Messages Recieved",
      "Count Of RX Auth Messages Recieved",
      
      # responsiveness
      "Average Days Until Patient Call Messages Marked Done",
      "Average Days Until Patient Medical Advice Request Message Marked Done",
      "Average Days Until Result Message Marked Done",
      "Average Days Until RX Auth Message Marked Done",
      
      # afterhours load
      "Count Of Minutes Active Outside Scheduled Time (30 Min Buffer)",
      "Count Of Saturday Minutes",
      "Count Of Sunday Minutes"
      )
    )

# Data cleaning and transformation
clean <- filtered |>
  mutate(
    
    id = as.character(DE_ID),
    
    type = 
      as.factor(
        case_when(
          Grouper %in% c("PHYSICIAN + PSYCHIATRIST", "NURSE PRACTITIONER") ~ "Attending",
          Grouper == "RESIDENT + FELLOW" ~ "Trainee",
          TRUE ~ Grouper
          )
        ),
    
    # fix typo
    metric = str_replace(Metric, "Recieved", "Received"),

    ) |>
  
  # remove duplicates keeping one
  distinct(id, type, metric, .keep_all = TRUE) |>
  
  rowwise() |>
  
  mutate(
    
    n_months = sum(!is.na(c_across(starts_with(c("24-", "25-"))))),
    
    value = ifelse(
      str_starts(metric, "Average"),
      mean(c_across(starts_with(c("24-", "25-"))), na.rm = TRUE),
      sum(c_across(starts_with(c("24-", "25-"))), na.rm = TRUE)
      )

    ) |> ungroup() |>
  
  select(id, type, metric, value, n_months) |>
  
  select(where(~ !all(is.na(.x) | .x == 0))) |>
  
  pivot_wider(
    names_from  = metric,
    values_from = value
    ) |>
  
  clean_names()

# Final transformations and feature engineering
final <- clean |>
  rowwise() |>
  mutate(
    
    # counts and averages
    count_of_messages_received = sum(
      count_of_patient_call_messages_received,
      count_of_patient_medical_advice_requests_messages_received,
      count_of_result_messages_received,
      count_of_rx_auth_messages_received,
      na.rm = TRUE
    ),
    average_days_until_message_marked_done = mean(
      average_days_until_patient_call_messages_marked_done,
      average_days_until_patient_medical_advice_request_message_marked_done,
      average_days_until_result_message_marked_done,
      average_days_until_rx_auth_message_marked_done,
      na.rm = TRUE
    ),
    
    # hours
    system_hours = count_of_minutes_in_the_system / 60,
    inbasket_hours = count_of_in_basket_minutes / 60,
    schedule_hours = scheduled_hours_per_day * count_of_scheduled_days,
    afterhours = sum(count_of_minutes_active_outside_scheduled_time_30_min_buffer,
                     sum(
                       count_of_saturday_minutes,
                       count_of_sunday_minutes,
                       na.rm = TRUE),
                     na.rm = TRUE) / 60,
    
    # ratios
    inbasket_ratio = count_of_in_basket_minutes / count_of_minutes_in_the_system,
    afterhours_ratio = afterhours / system_hours,
  ) |>
  ungroup() |>
  
  mutate(
    
    # per month
    across(c(!starts_with("average")
             &!c(id, type, n_months)
             & !ends_with("_ratio")),
      ~ .x / n_months,
      .names = "{.col}_per_month"),

    # per schedule day
    across(c(!starts_with("average")
             & !c(id, type, n_months, count_of_scheduled_days)
             & !ends_with(c("_ratio", "_per_month"))),
      ~ .x / count_of_scheduled_days,
      .names = "{.col}_per_schedule_day"),
    
    # per schedule hour
    across(c(!starts_with("average")
             & !c(id, type, n_months, schedule_hours)
             & !ends_with(c("_ratio", "_per_month", "_per_schedule_day"))),
      ~ .x / schedule_hours,
      .names = "{.col}_per_schedule_hour"),
    
    # per appointment
    across(c(!starts_with("average")
             & !c(id, type, n_months, count_of_appointments)
             & !ends_with(c("_ratio", "_per_month", "_per_schedule_day", "_per_schedule_hour"))),
      ~ .x / count_of_appointments,
      .names = "{.col}_per_appt")
    ) |>
  # Abbreviate column names
  rename_with(~ str_replace(., "count_of_", "n_")) |>
  rename_with(~ str_replace(., "in_basket", "ib")) |>
  rename_with(~ str_replace(., "inbasket", "ib")) |>
  rename_with(~ str_replace(., "minutes", "min")) |>
  rename_with(~ str_replace(., "patient_call", "pc")) |>
  rename_with(~ str_replace(., "received", "rec")) |>
  rename_with(~ str_replace(., "patient_medical_advice_requests", "mar")) |>
  rename_with(~ str_replace(., "patient_medical_advice_request", "mar")) |>
  rename_with(~ str_replace(., "result", "res")) |>
  rename_with(~ str_replace(., "rx_auth", "rxa")) |>
  rename_with(~ str_replace(., "message", "msg")) |>
  rename_with(~ str_replace(., "average_days_until", "avg_dtc")) |>
  rename_with(~ str_replace(., "_marked_done", "")) |>
  rename_with(~ str_replace(., "appointment", "appt")) |>
  rename_with(~ str_replace(., "outside_scheduled_time_30_min_buffer", "unscheduled"))
  
# Save datasets
if (!dir.exists("data")) {
  dir.create("data")
}
raw |> saveRDS("data/raw.rds")
filtered |> saveRDS("data/filtered.rds")
clean |> saveRDS("data/clean.rds")
final |> saveRDS("data/final.rds")

```

```{r eda, message=FALSE, warning=FALSE}

# Load necessary libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(patchwork)
library(readr)

# Load data
data <- readRDS("data/final.rds")



# Table 1: Summary statistics (n (%) as first column, mean (sd) as other column) long format
table_1


# Table 2: mean (sd) by inbasket workload categories
table_2 <- data |>
  arrange(desc(inbasket_hours_per_month)) |>
  mutate(
    `In-Basket Hours Per Month` = factor(case_when(
      inbasket_hours_per_month < 1.0 ~ "<1",
      inbasket_hours_per_month < 3.0 ~ "1-3", 
      inbasket_hours_per_month < 6.0 ~ "3-6",
      TRUE ~ ">6"),
      levels = c("<1", "1-3", "3-6", ">6"))
  ) |>
  group_by(`In-Basket Hours Per Month`) |>
  summarise(
    `Providers - n (%)` = sprintf("%d (%.1f)", n(), 100 * n() / nrow(data)),
    `Appointments - mean (sd)` = sprintf("%s (%.1f)", 
                                         comma(round(mean(appointments, na.rm = TRUE),1)),
                                         sd(appointments, na.rm = TRUE)),
    `Schedule hours - mean (sd)` = sprintf("%s (%.1f)", 
                                           comma(round(mean(schedule_hours, na.rm = TRUE),1)),
                                           sd(schedule_hours, na.rm = TRUE)),
    `Afterhours - mean (sd)` = sprintf("%s (%.1f)",
                                      comma(round(mean(afterhours, na.rm = TRUE),1)),
                                      sd(afterhours, na.rm = TRUE)),
    `In Basket Hours - mean (sd)` = sprintf("%s (%.1f)",
                                            comma(round(mean(inbasket_hours, na.rm = TRUE),1)),
                                            sd(inbasket_hours, na.rm = TRUE)),
    `Messages - mean (sd)` = sprintf("%s (%.1f)",
                                     comma(round(mean(msg, na.rm = TRUE),1)),
                                     sd(msg, na.rm = TRUE)),
    `Medical Advice Request - mean (sd)` = sprintf("%s (%.1f)",
                                                   comma(round(mean(msg_mar, na.rm = TRUE),1)),
                                                   sd(msg_mar, na.rm = TRUE)),
    `Patient Call - mean (sd)` = sprintf("%s (%.1f)",
                                         comma(round(mean(msg_pc, na.rm = TRUE),1)),
                                         sd(msg_pc, na.rm = TRUE)),
    `Result - mean (sd)` = sprintf("%s (%.1f)",
                                   comma(round(mean(msg_res, na.rm = TRUE),1)),
                                   sd(msg_res, na.rm = TRUE)),
    `Rx Authorization - mean (sd)` = sprintf("%s (%.1f)",
                                             comma(round(mean(msg_rxa, na.rm = TRUE),1)),
                                             sd(msg_rxa, na.rm = TRUE)),
    .groups = "drop")




# Figure 1: Correlation of message types with inbasket hours
message_types <- c("msg_pc", "msg_mar", "msg_res", "msg_rxa")

message_correlations <- sapply(message_types, function(var) {
  cor(data$inbasket_hours, data[[var]], use = "complete.obs")
})

message_correlation_data <- data.frame(
  variable = c(
    "Patient Call Messages", "Medical Advice Requests", 
    "Result Messages", "RX Authorization Messages"
  ),
  correlation = message_correlations,
  abs_correlation = abs(message_correlations)
) |>
  arrange(desc(correlation))

fig_1 <- ggplot(message_correlation_data, aes(x = reorder(variable, correlation), y = correlation, 
                                    fill = correlation)) +
  geom_col(alpha = 0.8, width = 0.7) +
  geom_text(aes(label = sprintf("%.3f", correlation)), 
            hjust = -0.1, size = 4, fontface = "bold") +
  
  scale_fill_gradient(
    low = "#FFCCCB",
    high = "#E31A1C",
    name = "Correlation\nStrength",
    guide = guide_colorbar(barwidth = 15, barheight = 1)
  ) +
  
  scale_y_continuous(
    limits = c(0, max(message_correlation_data$correlation) + 0.05),
    labels = function(x) sprintf("%.2f", x)
  ) +
  
  coord_flip() +
  
  labs(
    title = "Message Types: Correlation with Inbasket Hours",
    x = "Message Type",
    y = "Correlation Coefficient",
  ) +
  
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 11, color = "gray50"),
    panel.grid.minor = element_blank(),
    panel.grid.major.y = element_blank(),
    axis.line = element_line(color = "gray80"),
    legend.position = "bottom",
    plot.caption = element_text(size = 9, color = "gray60")
  )

# Figure 2: Pareto curve of inbasket hours
pareto_data <- data |>
  arrange(desc(inbasket_hours)) |>
  mutate(
    rank = row_number(),
    cum_inbasket_hours = cumsum(inbasket_hours),
    cum_inbasket_share = cum_inbasket_hours / sum(inbasket_hours, na.rm = TRUE),
    cum_provider_share = rank / n()
  )

fig_2 <- ggplot(pareto_data, aes(x = cum_provider_share, y = cum_inbasket_share)) +
  geom_area(fill = '#2C7FB8', alpha = 0.3) +
  geom_line(color = '#2C7FB8', size = 1.2) +
  geom_abline(slope = 1, intercept = 0, linetype = 'dashed', color = 'gray50') +
  scale_x_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, 1)) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, 1)) +
  labs(
    title = 'Cumulative Share of In-Basket Hours by Providers',
    x = 'Cumulative Share of Providers',
    y = 'Cumulative Share of In-Basket Hours',
    caption = 'Dashed line represents perfect equality'
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(size = 14, face = 'bold'),
    plot.subtitle = element_text(size = 11, color = 'gray50'),
    panel.grid.minor = element_blank(),
    axis.line = element_line(color = 'gray80'),
    plot.caption = element_text(size = 9, color = 'gray60')
  )


# Figure 3: Cumulative potential impact of inbasket offloading

rate_per_hour <- 173
fte_denominator <- 40 * 52 * 0.9 # 1,872 hours

ranked <- data |>
  arrange(desc(inbasket_hours)) |>
  mutate(
    rank = row_number(),
    cum_hours = cumsum(inbasket_hours)
  )

cum_df <- ranked |>
  mutate(
    fte_freed = cum_hours / fte_denominator,
    revenue_recovered = cum_hours * rate_per_hour,
    added_appointments = cum_hours * 2,
    afterhours_remaining = sum(data$afterhours, na.rm = TRUE) - cumsum(pmin(inbasket_hours, afterhours))
  ) |>
  select(rank, fte_freed, revenue_recovered, added_appointments, afterhours_remaining)

milestones <- cum_df |>
  filter(rank %% 5 == 0 | rank == 1 | rank == nrow(cum_df))

primary_color <- '#2C7FB8'
secondary_color <- '#E31A1C'
accent_color <- '#33A02C'
orange_color <- '#FF7F00'

p1 <- ggplot(cum_df, aes(x = rank)) +
  geom_area(aes(y = fte_freed), fill = primary_color, alpha = 0.3) +
  geom_line(aes(y = fte_freed), color = primary_color, linewidth = 1.2) +
  geom_point(data = milestones, aes(y = fte_freed), color = primary_color, size = 3) +
  scale_x_continuous(breaks = seq(0, 60, 10), limits = c(0, 64)) +
  scale_y_continuous(breaks = seq(0, 1, 0.25), labels = scales::number_format(accuracy = 0.01)) +
  labs(
    x = 'Providers (Ranked)',
    y = 'FTE',
    caption = '1 FTE = 1,872 hours/year'
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(size = 14, face = 'bold'),
    plot.subtitle = element_text(size = 11, color = 'gray50'),
    panel.grid.minor = element_blank(),
    axis.line = element_line(color = 'gray80'),
    plot.caption = element_text(size = 9, color = 'gray60')
  )

p2 <- ggplot(cum_df, aes(x = rank)) +
  geom_area(aes(y = afterhours_remaining), fill = secondary_color, alpha = 0.3) +
  geom_line(aes(y = afterhours_remaining), color = secondary_color, linewidth = 1.2) +
  geom_point(data = milestones, aes(y = afterhours_remaining), color = secondary_color, size = 3) +
  scale_x_continuous(breaks = seq(0, 60, 10), limits = c(0, 64)) +
  scale_y_continuous(labels = scales::number_format(scale = 1/1000, suffix = 'K')) +
  labs(
    x = 'Providers (Ranked)',
    y = 'Afterhours Reduction',
    caption = 'Baseline: 3,962 total after-hours hours'
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(size = 14, face = 'bold'),
    plot.subtitle = element_text(size = 11, color = 'gray50'),
    panel.grid.minor = element_blank(),
    axis.line = element_line(color = 'gray80'),
    plot.caption = element_text(size = 9, color = 'gray60')
  )

p3 <- ggplot(cum_df, aes(x = rank)) +
  geom_area(aes(y = added_appointments), fill = orange_color, alpha = 0.3) +
  geom_line(aes(y = added_appointments), color = orange_color, linewidth = 1.2) +
  geom_point(data = milestones, aes(y = added_appointments), color = orange_color, size = 3) +
  scale_x_continuous(breaks = seq(0, 60, 10), limits = c(0, 64)) +
  scale_y_continuous(labels = scales::number_format(accuracy = 1)) +
  labs(
    x = 'Providers (Ranked)',
    y = '30-minutes Appointments'
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(size = 14, face = 'bold'),
    plot.subtitle = element_text(size = 11, color = 'gray50'),
    panel.grid.minor = element_blank(),
    axis.line = element_line(color = 'gray80'),
    plot.caption = element_text(size = 9, color = 'gray60')
  )

p4 <- ggplot(cum_df, aes(x = rank)) +
  geom_area(aes(y = revenue_recovered/1000), fill = accent_color, alpha = 0.3) +
  geom_line(aes(y = revenue_recovered/1000), color = accent_color, linewidth = 1.2) +
  geom_point(data = milestones, aes(y = revenue_recovered/1000), color = accent_color, size = 3) +
  scale_x_continuous(breaks = seq(0, 60, 10), limits = c(0, 64)) +
  scale_y_continuous(labels = scales::dollar_format(scale = 1, suffix = 'K')) +
  labs(
    x = 'Providers (Ranked)',
    y = 'Revenue',
    caption = 'Rate: $173/hour'
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(size = 14, face = 'bold'),
    plot.subtitle = element_text(size = 11, color = 'gray50'),
    panel.grid.minor = element_blank(),
    axis.line = element_line(color = 'gray80'),
    plot.caption = element_text(size = 9, color = 'gray60')
  )

combined_plot <- (p1 | p2) / (p3 | p4)

fig_3 <- combined_plot + 
  plot_annotation(
    title = 'In-Basket Offloading Potential Impact',
    subtitle = 'Cummulative benefits',
    theme = theme(
      plot.title = element_text(size = 16, face = 'bold', hjust = 0.5),
      plot.subtitle = element_text(size = 12, color = 'gray50', hjust = 0.5),
      plot.caption = element_text(size = 10, color = 'gray60', hjust = 0.5)
    )
  )

# Figure 4: In-Basket hours vs Afterhours ratio
fig_4 <- ggplot(data, aes(x = inbasket_hours, y = afterhours_ratio)) +
  geom_point(alpha = 0.6, color = '#2C7FB8', size = 2) +
  geom_smooth(method = 'lm', color = '#E31A1C', se = TRUE, linewidth = 1) +
  scale_x_continuous(labels = scales::number_format(accuracy = 1), limits = c(0, NA)) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, NA)) +
  labs(
    title = 'In-Basket Hours vs Afterhours Ratio',
    subtitle = 'Exploring the relationship between in-basket workload and afterhours activity',
    x = 'In-Basket Hours',
    y = 'Afterhours Ratio',
    caption = 'Afterhours Ratio: Afterhours Hours / Total System Hours'
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(size = 14, face = 'bold'),
    plot.subtitle = element_text(size = 11, color = 'gray50'),
    panel.grid.minor = element_blank(),
    axis.line = element_line(color = 'gray80'),
    plot.caption = element_text(size = 9, color = 'gray60')
  )


# Save tables and figures
if (!dir.exists("tables")) {
  dir.create("tables")
}
if (!dir.exists("figures")) {
  dir.create("figures")
}
write_csv(table_1, "tables/table_1_summary_statistics.csv")
write_csv(table_2, "tables/table_2_inbasket_workload_categories.csv")
ggsave(fig_1, filename = "figures/fig_1_message_type_correlation.png", width = 8, height = 5, dpi = 300)
ggsave(fig_2, filename = "figures/fig_2_pareto_curve.png", width = 8, height = 5, dpi = 300)
ggsave(fig_3, filename = "figures/fig_3_cumulative_impact.png", width = 10, height = 8, dpi = 300)
ggsave(fig_4, filename = "figures/fig_4_inbasket_afterhours.png", width = 8, height = 5, dpi = 300)

```

```{r, message=FALSE, warning=FALSE}

library(ggplot2)
library(dplyr)
library(tidyr)
library(scales)
library(readr)

data <- readRDS("data/final.rds")


table_3 <- data |>
  select(where(is.numeric)) |>
  pivot_longer(everything(), names_to = "Metric", values_to = "Value") |>
  group_by(Metric) |>
  summarise(
    `Mean (SD)`    = sprintf("%s (%.1f)", comma(round(mean(Value, na.rm = TRUE), 1)), sd(Value, na.rm = TRUE)),
    `Median [IQR]` = sprintf("%s [%s - %s]",
                             comma(round(median(Value, na.rm = TRUE), 1)),
                             comma(round(quantile(Value, 0.25, na.rm = TRUE), 1)),
                             comma(round(quantile(Value, 0.75, na.rm = TRUE), 1))),
    Range          = sprintf("%s - %s",
                             comma(round(min(Value, na.rm = TRUE), 1)),
                             comma(round(max(Value, na.rm = TRUE), 1))),
    .groups = "drop"
  )



# Figure 5: Distribution of message types
message_distribution <- data |>
  summarise(
    Patient_Call = sum(msg_pc, na.rm = TRUE),
    Medical_Advice_Request = sum(msg_mar, na.rm = TRUE),
    Result = sum(msg_res, na.rm = TRUE),
    RX_Authorization = sum(msg_rxa, na.rm = TRUE)
  ) |>
  pivot_longer(
    cols = everything(),
    names_to = "Message_Type",
    values_to = "Count"
  ) |>
  mutate(
    Message_Type = recode(Message_Type,
                          Patient_Call = "Patient Call",
                          Medical_Advice_Request = "Medical Advice Request",
                          Result = "Result",
                          RX_Authorization = "RX Authorization"),
    Percentage = Count / sum(Count)
  )

fig_5 <- ggplot(message_distribution, aes(x = "", y = Percentage, fill = Message_Type)) +
  geom_col(width = 1, color = "white") +
  coord_polar(theta = "y") +
  geom_text(aes(label = scales::percent(Percentage, accuracy = 0.1)),
            position = position_stack(vjust = 0.5), size = 4, color = "white") +
  scale_fill_brewer(palette = "Set1") +
  labs(
    title = "Distribution of Message Types",
    fill = "Message Type"
  ) +
  theme_void(base_size = 12) +
  theme(
    plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
    legend.position = "right"
  )

# Figure 6: Boxplot of In-Basket Hours by Provider Type
fig_6 <- ggplot(data, aes(x = type, y = inbasket_hours, fill = type)) +
  geom_boxplot(outlier.color = "red", outlier.size = 2, alpha = 0.7) +
  scale_y_continuous(labels = comma_format(accuracy = 1), limits = c(0, NA)) +
  labs(
    title = "In-Basket Hours by Provider Type",
    x = "Provider Type",
    y = "In-Basket Hours"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 11, color = "gray50"),
    panel.grid.minor = element_blank(),
    axis.line = element_line(color = "gray80"),
    legend.position = "none"
  )


```

